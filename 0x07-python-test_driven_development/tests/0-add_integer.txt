If both arguments are non-integers and non-floats, a TypeError message is
 only
printed for the first argument.

::

   >>> add_integer("hello", "there")
   Traceback (most recent call last):
   TypeError: a must be an integer

The function will fail if infinity is provided.

::

   >>> add_integer(float('inf'))
   Traceback (most recent call last):
   OverflowError: cannot convert float infinity to integer

::

   >>> add_integer(2, float('inf'))
   Traceback (most recent call last):
   OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

   >>> add_integer(float('nan'))
   Traceback (most recent call last):
   ValueError: cannot convert float NaN to integer

::

   >>> add_integer(2, float('nan'))
   Traceback (most recent call last):
   ValueError: cannot convert float NaN to integer

::

   >>> add_integer("hello", 3)
   Traceback (most recent call last):
   TypeError: a must be an integer

::

   >>> add_integer(2, "hello")
   Traceback (most recent call last):
   TypeError: b must be an integer

::

   >>> add_integer(None)
   Traceback (most recent call last):
   TypeError: a must be an integer

::

The function will fail if infinity is provided.

::

   >>> add_integer(float('inf'))
   Traceback (most recent call last):
   TypeError: cannot convert float infinity to integer

::

   >>> add_integer(2, float('inf'))
   Traceback (most recent call last):
   TypeError: cannot convert float infinity to integer

And again with the NaN numbers

::

Non-Numbers
===========

''add_integer()'' expects that both arguments are either integers or floats

::

   >>> add_integer("hello", 3)
   Traceback (most recent call last):
   TypeError: a must be an integer

::

   >>> add_integer(2, "hello")
   Traceback (most recent call last):
   TypeError: b must be an integer

::

   >>> add_integer(None)
   Traceback (most recent call last):
   TypeError: a must be an integer

::

   >>> add_integer(2.3, None)
   Traceback (most recent call last):
   TypeError: b must be an integer

If both argumets are non-integers and non-floats, a TypeError message is
 only
printed for the first argument.

::

   >>> add_integer("hello", "there")
   Traceback (most recent call last):
   TypeError: a must be an integer
